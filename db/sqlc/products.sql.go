// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: products.sql

package db

import (
	"context"
	"database/sql"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (
    name,
    merchant_id,
    status
)
VALUES ($1, $2, $3)
RETURNING id, name, merchant_id, status, created_at, img_path
`

type CreateProductParams struct {
	Name       string            `json:"name"`
	MerchantID int64             `json:"merchant_id"`
	Status     NullProductStatus `json:"status"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct, arg.Name, arg.MerchantID, arg.Status)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.MerchantID,
		&i.Status,
		&i.CreatedAt,
		&i.ImgPath,
	)
	return i, err
}

const getMerchantIDbyPrID = `-- name: GetMerchantIDbyPrID :one
SELECT merchant_id
FROM products
WHERE id = $1
`

func (q *Queries) GetMerchantIDbyPrID(ctx context.Context, id string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getMerchantIDbyPrID, id)
	var merchant_id int64
	err := row.Scan(&merchant_id)
	return merchant_id, err
}

const getProductNameByID = `-- name: GetProductNameByID :one
SELECT name 
FROM products
WHERE id = $1
`

func (q *Queries) GetProductNameByID(ctx context.Context, id string) (string, error) {
	row := q.db.QueryRowContext(ctx, getProductNameByID, id)
	var name string
	err := row.Scan(&name)
	return name, err
}

const listAllProducts = `-- name: ListAllProducts :many
SELECT id, name, merchant_id, status, created_at, img_path
FROM products
LIMIT $1
OFFSET $2
`

type ListAllProductsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAllProducts(ctx context.Context, arg ListAllProductsParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listAllProducts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.MerchantID,
			&i.Status,
			&i.CreatedAt,
			&i.ImgPath,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductByMerchantID = `-- name: ListProductByMerchantID :many
SELECT id, name, merchant_id, status, created_at, img_path
FROM products
WHERE merchant_id = $1
`

func (q *Queries) ListProductByMerchantID(ctx context.Context, merchantID int64) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProductByMerchantID, merchantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.MerchantID,
			&i.Status,
			&i.CreatedAt,
			&i.ImgPath,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductID = `-- name: ListProductID :many
SELECT id 
FROM products
LIMIT $1
OFFSET $2
`

type ListProductIDParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListProductID(ctx context.Context, arg ListProductIDParams) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, listProductID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductTags = `-- name: ListProductTags :many
SELECT id, name
FROM product_tags
WHERE id in (
    SELECT product_tags_id
    FROM product_tags_products
    WHERE products_id = $1
)
`

func (q *Queries) ListProductTags(ctx context.Context, productsID string) ([]ProductTag, error) {
	rows, err := q.db.QueryContext(ctx, listProductTags, productsID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProductTag{}
	for rows.Next() {
		var i ProductTag
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products 
SET 
    name = COALESCE($1, name),
    status = $2
WHERE 
    id = $3
RETURNING id, name, merchant_id, status, created_at, img_path
`

type UpdateProductParams struct {
	Name   sql.NullString    `json:"name"`
	Status NullProductStatus `json:"status"`
	ID     string            `json:"id"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateProduct, arg.Name, arg.Status, arg.ID)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.MerchantID,
		&i.Status,
		&i.CreatedAt,
		&i.ImgPath,
	)
	return i, err
}
