// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: deals.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createDeal = `-- name: CreateDeal :one
INSERT INTO deals (
    name,
    start_date,
    end_date,
    type,
    discount_rate,
    deal_limit
)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, name, code, start_date, end_date, type, discount_rate, merchant_id, deal_limit
`

type CreateDealParams struct {
	Name         string        `json:"name"`
	StartDate    time.Time     `json:"start_date"`
	EndDate      time.Time     `json:"end_date"`
	Type         string        `json:"type"`
	DiscountRate float32       `json:"discount_rate"`
	DealLimit    sql.NullInt32 `json:"deal_limit"`
}

func (q *Queries) CreateDeal(ctx context.Context, arg CreateDealParams) (Deal, error) {
	row := q.db.QueryRowContext(ctx, createDeal,
		arg.Name,
		arg.StartDate,
		arg.EndDate,
		arg.Type,
		arg.DiscountRate,
		arg.DealLimit,
	)
	var i Deal
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Code,
		&i.StartDate,
		&i.EndDate,
		&i.Type,
		&i.DiscountRate,
		&i.MerchantID,
		&i.DealLimit,
	)
	return i, err
}

const getDealByID = `-- name: GetDealByID :one
SELECT id, name, code, start_date, end_date, type, discount_rate, merchant_id, deal_limit
FROM deals
WHERE id = $1 AND 
    start_date <= now() AND now() <= end_date
`

func (q *Queries) GetDealByID(ctx context.Context, id int64) (Deal, error) {
	row := q.db.QueryRowContext(ctx, getDealByID, id)
	var i Deal
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Code,
		&i.StartDate,
		&i.EndDate,
		&i.Type,
		&i.DiscountRate,
		&i.MerchantID,
		&i.DealLimit,
	)
	return i, err
}

const listDealsByMerchantID = `-- name: ListDealsByMerchantID :many
SELECT id, name, code, start_date, end_date, type, discount_rate, merchant_id, deal_limit 
FROM deals
WHERE merchant_id = $1
`

func (q *Queries) ListDealsByMerchantID(ctx context.Context, merchantID int64) ([]Deal, error) {
	rows, err := q.db.QueryContext(ctx, listDealsByMerchantID, merchantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Deal{}
	for rows.Next() {
		var i Deal
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Code,
			&i.StartDate,
			&i.EndDate,
			&i.Type,
			&i.DiscountRate,
			&i.MerchantID,
			&i.DealLimit,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
