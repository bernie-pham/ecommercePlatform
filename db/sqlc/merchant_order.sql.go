// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: merchant_order.sql

package db

import (
	"context"
)

const createMerchantOrder = `-- name: CreateMerchantOrder :one
INSERT INTO merchant_order (
    merchant_id,
    total_price,
    order_status,
    order_id
)
VALUES ($1, $2, $3, $4)
RETURNING id
`

type CreateMerchantOrderParams struct {
	MerchantID  int64       `json:"merchant_id"`
	TotalPrice  float32     `json:"total_price"`
	OrderStatus OrderStatus `json:"order_status"`
	OrderID     int64       `json:"order_id"`
}

func (q *Queries) CreateMerchantOrder(ctx context.Context, arg CreateMerchantOrderParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createMerchantOrder,
		arg.MerchantID,
		arg.TotalPrice,
		arg.OrderStatus,
		arg.OrderID,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getMerchantOrder = `-- name: GetMerchantOrder :one
SELECT id, merchant_id, total_price, order_status, created_at, order_id, updated_at
FROM merchant_order
WHERE id = $1 AND merchant_id = $2
`

type GetMerchantOrderParams struct {
	ID         int64 `json:"id"`
	MerchantID int64 `json:"merchant_id"`
}

func (q *Queries) GetMerchantOrder(ctx context.Context, arg GetMerchantOrderParams) (MerchantOrder, error) {
	row := q.db.QueryRowContext(ctx, getMerchantOrder, arg.ID, arg.MerchantID)
	var i MerchantOrder
	err := row.Scan(
		&i.ID,
		&i.MerchantID,
		&i.TotalPrice,
		&i.OrderStatus,
		&i.CreatedAt,
		&i.OrderID,
		&i.UpdatedAt,
	)
	return i, err
}

const updateMerchantOrderStatus = `-- name: UpdateMerchantOrderStatus :exec
UPDATE merchant_order
SET order_status = $1
WHERE id = $2
`

type UpdateMerchantOrderStatusParams struct {
	OrderStatus OrderStatus `json:"order_status"`
	ID          int64       `json:"id"`
}

func (q *Queries) UpdateMerchantOrderStatus(ctx context.Context, arg UpdateMerchantOrderStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateMerchantOrderStatus, arg.OrderStatus, arg.ID)
	return err
}

const updateMerchantOrderTotalPrice = `-- name: UpdateMerchantOrderTotalPrice :exec
UPDATE merchant_order
SET total_price = $1
WHERE id = $2
`

type UpdateMerchantOrderTotalPriceParams struct {
	TotalPrice float32 `json:"total_price"`
	ID         int64   `json:"id"`
}

func (q *Queries) UpdateMerchantOrderTotalPrice(ctx context.Context, arg UpdateMerchantOrderTotalPriceParams) error {
	_, err := q.db.ExecContext(ctx, updateMerchantOrderTotalPrice, arg.TotalPrice, arg.ID)
	return err
}
