// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: order_item.sql

package db

import (
	"context"
)

const createOrderItem = `-- name: CreateOrderItem :one
INSERT INTO order_items (
    order_id,
    product_entry_id,
    quantity,
    total_price
)
VALUES ($1, $2, $3, $4)
RETURNING order_id, product_entry_id, quantity, total_price
`

type CreateOrderItemParams struct {
	OrderID        int64   `json:"order_id"`
	ProductEntryID int64   `json:"product_entry_id"`
	Quantity       int32   `json:"quantity"`
	TotalPrice     float32 `json:"total_price"`
}

func (q *Queries) CreateOrderItem(ctx context.Context, arg CreateOrderItemParams) (OrderItem, error) {
	row := q.db.QueryRowContext(ctx, createOrderItem,
		arg.OrderID,
		arg.ProductEntryID,
		arg.Quantity,
		arg.TotalPrice,
	)
	var i OrderItem
	err := row.Scan(
		&i.OrderID,
		&i.ProductEntryID,
		&i.Quantity,
		&i.TotalPrice,
	)
	return i, err
}

const deleteOrderItem = `-- name: DeleteOrderItem :exec
DELETE FROM order_items
WHERE order_id = $1 AND product_entry_id = $2
`

type DeleteOrderItemParams struct {
	OrderID        int64 `json:"order_id"`
	ProductEntryID int64 `json:"product_entry_id"`
}

func (q *Queries) DeleteOrderItem(ctx context.Context, arg DeleteOrderItemParams) error {
	_, err := q.db.ExecContext(ctx, deleteOrderItem, arg.OrderID, arg.ProductEntryID)
	return err
}

const updateOrderItemQuantity = `-- name: UpdateOrderItemQuantity :one
UPDATE order_items
SET 
    quantity = $1
WHERE 
    order_id = $2 AND product_entry_id = $3
RETURNING order_id, product_entry_id, quantity, total_price
`

type UpdateOrderItemQuantityParams struct {
	Quantity       int32 `json:"quantity"`
	OrderID        int64 `json:"order_id"`
	ProductEntryID int64 `json:"product_entry_id"`
}

func (q *Queries) UpdateOrderItemQuantity(ctx context.Context, arg UpdateOrderItemQuantityParams) (OrderItem, error) {
	row := q.db.QueryRowContext(ctx, updateOrderItemQuantity, arg.Quantity, arg.OrderID, arg.ProductEntryID)
	var i OrderItem
	err := row.Scan(
		&i.OrderID,
		&i.ProductEntryID,
		&i.Quantity,
		&i.TotalPrice,
	)
	return i, err
}
