// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: order_item.sql

package db

import (
	"context"
)

const createOrderItem = `-- name: CreateOrderItem :one
INSERT INTO order_items (
    order_id,
    product_entry_id,
    quantity,
    total_price
)
VALUES ($1, $2, $3, $4)
RETURNING order_id, product_entry_id, quantity, total_price, merchant_order_id
`

type CreateOrderItemParams struct {
	OrderID        int64   `json:"order_id"`
	ProductEntryID int64   `json:"product_entry_id"`
	Quantity       int32   `json:"quantity"`
	TotalPrice     float32 `json:"total_price"`
}

func (q *Queries) CreateOrderItem(ctx context.Context, arg CreateOrderItemParams) (OrderItem, error) {
	row := q.db.QueryRowContext(ctx, createOrderItem,
		arg.OrderID,
		arg.ProductEntryID,
		arg.Quantity,
		arg.TotalPrice,
	)
	var i OrderItem
	err := row.Scan(
		&i.OrderID,
		&i.ProductEntryID,
		&i.Quantity,
		&i.TotalPrice,
		&i.MerchantOrderID,
	)
	return i, err
}

const createOrderItemV2 = `-- name: CreateOrderItemV2 :exec
INSERT INTO order_items (
    order_id,
    product_entry_id,
    quantity,
    total_price,
    merchant_order_id
)
VALUES ($1, $2, $3, $4, $5)
`

type CreateOrderItemV2Params struct {
	OrderID         int64   `json:"order_id"`
	ProductEntryID  int64   `json:"product_entry_id"`
	Quantity        int32   `json:"quantity"`
	TotalPrice      float32 `json:"total_price"`
	MerchantOrderID int64   `json:"merchant_order_id"`
}

func (q *Queries) CreateOrderItemV2(ctx context.Context, arg CreateOrderItemV2Params) error {
	_, err := q.db.ExecContext(ctx, createOrderItemV2,
		arg.OrderID,
		arg.ProductEntryID,
		arg.Quantity,
		arg.TotalPrice,
		arg.MerchantOrderID,
	)
	return err
}

const deleteOrderItem = `-- name: DeleteOrderItem :exec
DELETE FROM order_items
WHERE order_id = $1 AND product_entry_id = $2
`

type DeleteOrderItemParams struct {
	OrderID        int64 `json:"order_id"`
	ProductEntryID int64 `json:"product_entry_id"`
}

func (q *Queries) DeleteOrderItem(ctx context.Context, arg DeleteOrderItemParams) error {
	_, err := q.db.ExecContext(ctx, deleteOrderItem, arg.OrderID, arg.ProductEntryID)
	return err
}

const listOrderItemsByMerchantOrderID = `-- name: ListOrderItemsByMerchantOrderID :many
SELECT product_entry_id, quantity, total_price
FROM order_items
WHERE merchant_order_id = $1
`

type ListOrderItemsByMerchantOrderIDRow struct {
	ProductEntryID int64   `json:"product_entry_id"`
	Quantity       int32   `json:"quantity"`
	TotalPrice     float32 `json:"total_price"`
}

func (q *Queries) ListOrderItemsByMerchantOrderID(ctx context.Context, merchantOrderID int64) ([]ListOrderItemsByMerchantOrderIDRow, error) {
	rows, err := q.db.QueryContext(ctx, listOrderItemsByMerchantOrderID, merchantOrderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListOrderItemsByMerchantOrderIDRow{}
	for rows.Next() {
		var i ListOrderItemsByMerchantOrderIDRow
		if err := rows.Scan(&i.ProductEntryID, &i.Quantity, &i.TotalPrice); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderItemQuantity = `-- name: UpdateOrderItemQuantity :one
UPDATE order_items
SET 
    quantity = $1
WHERE 
    order_id = $2 AND product_entry_id = $3
RETURNING order_id, product_entry_id, quantity, total_price, merchant_order_id
`

type UpdateOrderItemQuantityParams struct {
	Quantity       int32 `json:"quantity"`
	OrderID        int64 `json:"order_id"`
	ProductEntryID int64 `json:"product_entry_id"`
}

func (q *Queries) UpdateOrderItemQuantity(ctx context.Context, arg UpdateOrderItemQuantityParams) (OrderItem, error) {
	row := q.db.QueryRowContext(ctx, updateOrderItemQuantity, arg.Quantity, arg.OrderID, arg.ProductEntryID)
	var i OrderItem
	err := row.Scan(
		&i.OrderID,
		&i.ProductEntryID,
		&i.Quantity,
		&i.TotalPrice,
		&i.MerchantOrderID,
	)
	return i, err
}
