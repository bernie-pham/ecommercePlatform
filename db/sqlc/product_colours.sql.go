// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: product_colours.sql

package db

import (
	"context"
)

const createPColour = `-- name: CreatePColour :one
INSERT INTO 
    product_colour (colour_name)
VALUES ($1) RETURNING id, colour_name
`

func (q *Queries) CreatePColour(ctx context.Context, colourName string) (ProductColour, error) {
	row := q.db.QueryRowContext(ctx, createPColour, colourName)
	var i ProductColour
	err := row.Scan(&i.ID, &i.ColourName)
	return i, err
}

const deletePColour = `-- name: DeletePColour :exec
DELETE FROM product_colour
WHERE id = $1
`

func (q *Queries) DeletePColour(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePColour, id)
	return err
}

const listPColours = `-- name: ListPColours :many
SELECT id, colour_name
FROM product_colour
`

func (q *Queries) ListPColours(ctx context.Context) ([]ProductColour, error) {
	rows, err := q.db.QueryContext(ctx, listPColours)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProductColour{}
	for rows.Next() {
		var i ProductColour
		if err := rows.Scan(&i.ID, &i.ColourName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
