// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: product_entries.sql

package db

import (
	"context"
	"database/sql"
)

const createPEntry = `-- name: CreatePEntry :one
INSERT INTO 
    product_entry (
        product_id,
        colour_id,
        size_id,
        general_criteria_id,
        quantity,
        deal_id
    )
VALUES ($1, $2, $3, $4, $5, $6) 
RETURNING id, product_id, colour_id, size_id, general_criteria_id, quantity, deal_id, is_active, modified_at, created_at
`

type CreatePEntryParams struct {
	ProductID         int64         `json:"product_id"`
	ColourID          sql.NullInt64 `json:"colour_id"`
	SizeID            sql.NullInt64 `json:"size_id"`
	GeneralCriteriaID sql.NullInt64 `json:"general_criteria_id"`
	Quantity          int32         `json:"quantity"`
	DealID            sql.NullInt64 `json:"deal_id"`
}

func (q *Queries) CreatePEntry(ctx context.Context, arg CreatePEntryParams) (ProductEntry, error) {
	row := q.db.QueryRowContext(ctx, createPEntry,
		arg.ProductID,
		arg.ColourID,
		arg.SizeID,
		arg.GeneralCriteriaID,
		arg.Quantity,
		arg.DealID,
	)
	var i ProductEntry
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.ColourID,
		&i.SizeID,
		&i.GeneralCriteriaID,
		&i.Quantity,
		&i.DealID,
		&i.IsActive,
		&i.ModifiedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getPEntry = `-- name: GetPEntry :one
SELECT id, product_id, colour_id, size_id, general_criteria_id, quantity, deal_id, is_active, modified_at, created_at
FROM product_entry
WHERE id = $1
`

func (q *Queries) GetPEntry(ctx context.Context, id int64) (ProductEntry, error) {
	row := q.db.QueryRowContext(ctx, getPEntry, id)
	var i ProductEntry
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.ColourID,
		&i.SizeID,
		&i.GeneralCriteriaID,
		&i.Quantity,
		&i.DealID,
		&i.IsActive,
		&i.ModifiedAt,
		&i.CreatedAt,
	)
	return i, err
}

const listActivePEntriesByPID = `-- name: ListActivePEntriesByPID :many
SELECT id, product_id, colour_id, size_id, general_criteria_id, quantity, deal_id, is_active, modified_at, created_at
FROM product_entry
WHERE product_id = $1 AND is_active = true
`

func (q *Queries) ListActivePEntriesByPID(ctx context.Context, productID int64) ([]ProductEntry, error) {
	rows, err := q.db.QueryContext(ctx, listActivePEntriesByPID, productID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProductEntry{}
	for rows.Next() {
		var i ProductEntry
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.ColourID,
			&i.SizeID,
			&i.GeneralCriteriaID,
			&i.Quantity,
			&i.DealID,
			&i.IsActive,
			&i.ModifiedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPEntriesByPID = `-- name: ListPEntriesByPID :many
SELECT id, product_id, colour_id, size_id, general_criteria_id, quantity, deal_id, is_active, modified_at, created_at
FROM product_entry
WHERE product_id = $1
`

func (q *Queries) ListPEntriesByPID(ctx context.Context, productID int64) ([]ProductEntry, error) {
	rows, err := q.db.QueryContext(ctx, listPEntriesByPID, productID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProductEntry{}
	for rows.Next() {
		var i ProductEntry
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.ColourID,
			&i.SizeID,
			&i.GeneralCriteriaID,
			&i.Quantity,
			&i.DealID,
			&i.IsActive,
			&i.ModifiedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEntryQuantity = `-- name: UpdateEntryQuantity :exec
UPDATE product_entry
SET 
    quantity = quantity - $1
WHERE
    id = $2
`

type UpdateEntryQuantityParams struct {
	Quantity int32 `json:"quantity"`
	ID       int64 `json:"id"`
}

func (q *Queries) UpdateEntryQuantity(ctx context.Context, arg UpdateEntryQuantityParams) error {
	_, err := q.db.ExecContext(ctx, updateEntryQuantity, arg.Quantity, arg.ID)
	return err
}

const updatePEntry = `-- name: UpdatePEntry :one
UPDATE product_entry
SET 
    quantity = COALESCE($1, quantity),
    deal_id = COALESCE($2, deal_id),
    modified_at = COALESCE($3, modified_at),
    is_active = $4
WHERE
    id = $5
RETURNING id, product_id, colour_id, size_id, general_criteria_id, quantity, deal_id, is_active, modified_at, created_at
`

type UpdatePEntryParams struct {
	Quantity   sql.NullInt32 `json:"quantity"`
	DealID     sql.NullInt64 `json:"deal_id"`
	ModifiedAt sql.NullTime  `json:"modified_at"`
	IsActive   bool          `json:"is_active"`
	ID         int64         `json:"id"`
}

func (q *Queries) UpdatePEntry(ctx context.Context, arg UpdatePEntryParams) (ProductEntry, error) {
	row := q.db.QueryRowContext(ctx, updatePEntry,
		arg.Quantity,
		arg.DealID,
		arg.ModifiedAt,
		arg.IsActive,
		arg.ID,
	)
	var i ProductEntry
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.ColourID,
		&i.SizeID,
		&i.GeneralCriteriaID,
		&i.Quantity,
		&i.DealID,
		&i.IsActive,
		&i.ModifiedAt,
		&i.CreatedAt,
	)
	return i, err
}
