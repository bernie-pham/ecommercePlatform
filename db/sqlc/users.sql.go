// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  full_name,
  email,
  phone,
  hashed_password,
  access_level  
)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, full_name, email, phone, hashed_password, created_at, password_updated_at, access_level
`

type CreateUserParams struct {
	FullName       string `json:"full_name"`
	Email          string `json:"email"`
	Phone          string `json:"phone"`
	HashedPassword string `json:"hashed_password"`
	AccessLevel    int32  `json:"access_level"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.FullName,
		arg.Email,
		arg.Phone,
		arg.HashedPassword,
		arg.AccessLevel,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.Phone,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.PasswordUpdatedAt,
		&i.AccessLevel,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, full_name, email, phone, hashed_password, created_at, password_updated_at, access_level
FROM users
Where email = $1
`

func (q *Queries) GetUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.Phone,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.PasswordUpdatedAt,
		&i.AccessLevel,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET 
  full_name = COALESCE($1, full_name),
  phone = COALESCE($2, phone),
  hashed_password = COALESCE($3, hashed_password),
  password_updated_at = COALESCE($4, password_updated_at)
WHERE 
  email = $5
RETURNING id, full_name, email, phone, hashed_password, created_at, password_updated_at, access_level
`

type UpdateUserParams struct {
	FullName          sql.NullString `json:"full_name"`
	Phone             sql.NullString `json:"phone"`
	HashedPassword    sql.NullString `json:"hashed_password"`
	PasswordUpdatedAt sql.NullTime   `json:"password_updated_at"`
	Email             string         `json:"email"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.FullName,
		arg.Phone,
		arg.HashedPassword,
		arg.PasswordUpdatedAt,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.Phone,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.PasswordUpdatedAt,
		&i.AccessLevel,
	)
	return i, err
}
