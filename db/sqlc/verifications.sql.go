// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: verifications.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createVerification = `-- name: CreateVerification :one
INSERT INTO
    verifications (
        id,
        email,
        expires_at
    )
VALUES (
    $1, $2, $3
) RETURNING id, email, is_occurpied, expires_at, created_at
`

type CreateVerificationParams struct {
	ID        uuid.UUID `json:"id"`
	Email     string    `json:"email"`
	ExpiresAt time.Time `json:"expires_at"`
}

func (q *Queries) CreateVerification(ctx context.Context, arg CreateVerificationParams) (Verification, error) {
	row := q.db.QueryRowContext(ctx, createVerification, arg.ID, arg.Email, arg.ExpiresAt)
	var i Verification
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.IsOccurpied,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getVerification = `-- name: GetVerification :one
SELECT id, email, is_occurpied, expires_at, created_at
FROM verifications
WHERE id = $1 AND is_occurpied = false
`

func (q *Queries) GetVerification(ctx context.Context, id uuid.UUID) (Verification, error) {
	row := q.db.QueryRowContext(ctx, getVerification, id)
	var i Verification
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.IsOccurpied,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const occupyVerification = `-- name: OccupyVerification :exec
UPDATE verifications
SET is_occurpied = true
Where id = $1 AND is_occurpied = false
`

func (q *Queries) OccupyVerification(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, occupyVerification, id)
	return err
}
