// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: merchants.sql

package db

import (
	"context"
	"database/sql"
)

const createMerchant = `-- name: CreateMerchant :one
INSERT INTO merchants (
  user_id,
  country_code,
  merchant_name,
  description
)
VALUES ($1, $2, $3, $4)
RETURNING id, country_code, merchant_name, created_at, user_id, description, is_active
`

type CreateMerchantParams struct {
	UserID       int64  `json:"user_id"`
	CountryCode  int32  `json:"country_code"`
	MerchantName string `json:"merchant_name"`
	Description  string `json:"description"`
}

func (q *Queries) CreateMerchant(ctx context.Context, arg CreateMerchantParams) (Merchant, error) {
	row := q.db.QueryRowContext(ctx, createMerchant,
		arg.UserID,
		arg.CountryCode,
		arg.MerchantName,
		arg.Description,
	)
	var i Merchant
	err := row.Scan(
		&i.ID,
		&i.CountryCode,
		&i.MerchantName,
		&i.CreatedAt,
		&i.UserID,
		&i.Description,
		&i.IsActive,
	)
	return i, err
}

const disableMerchant = `-- name: DisableMerchant :exec
UPDATE merchants
SET 
    is_active = false
WHERE id = $1
`

func (q *Queries) DisableMerchant(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, disableMerchant, id)
	return err
}

const enableMerchant = `-- name: EnableMerchant :exec
UPDATE merchants
SET 
    is_active = true
WHERE id = $1
`

func (q *Queries) EnableMerchant(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, enableMerchant, id)
	return err
}

const getMerchant = `-- name: GetMerchant :one
SELECT id, country_code, merchant_name, created_at, user_id, description, is_active
FROM merchants
WHERE id = $1
`

func (q *Queries) GetMerchant(ctx context.Context, id int64) (Merchant, error) {
	row := q.db.QueryRowContext(ctx, getMerchant, id)
	var i Merchant
	err := row.Scan(
		&i.ID,
		&i.CountryCode,
		&i.MerchantName,
		&i.CreatedAt,
		&i.UserID,
		&i.Description,
		&i.IsActive,
	)
	return i, err
}

const listMerchants = `-- name: ListMerchants :many
SELECT id, country_code, merchant_name, created_at, user_id, description, is_active
FROM merchants
Where user_id = $1
`

func (q *Queries) ListMerchants(ctx context.Context, userID int64) ([]Merchant, error) {
	rows, err := q.db.QueryContext(ctx, listMerchants, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Merchant{}
	for rows.Next() {
		var i Merchant
		if err := rows.Scan(
			&i.ID,
			&i.CountryCode,
			&i.MerchantName,
			&i.CreatedAt,
			&i.UserID,
			&i.Description,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMerchant = `-- name: UpdateMerchant :one
UPDATE merchants
SET 
  merchant_name = COALESCE($1, merchant_name),
  country_code = COALESCE($2, country_code),
  description = COALESCE($3, description)
WHERE 
  id = $4
RETURNING id, country_code, merchant_name, created_at, user_id, description, is_active
`

type UpdateMerchantParams struct {
	MerchantName sql.NullString `json:"merchant_name"`
	CountryCode  sql.NullInt32  `json:"country_code"`
	Description  sql.NullString `json:"description"`
	ID           int64          `json:"id"`
}

func (q *Queries) UpdateMerchant(ctx context.Context, arg UpdateMerchantParams) (Merchant, error) {
	row := q.db.QueryRowContext(ctx, updateMerchant,
		arg.MerchantName,
		arg.CountryCode,
		arg.Description,
		arg.ID,
	)
	var i Merchant
	err := row.Scan(
		&i.ID,
		&i.CountryCode,
		&i.MerchantName,
		&i.CreatedAt,
		&i.UserID,
		&i.Description,
		&i.IsActive,
	)
	return i, err
}
