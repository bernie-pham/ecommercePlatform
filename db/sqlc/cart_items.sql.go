// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: cart_items.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const addCartItem = `-- name: AddCartItem :one
INSERT INTO cart_item (
    product_entry_id,
    quantity,
    user_id
)
VALUES ($1, $2, $3) RETURNING id, product_entry_id, quantity, created_at, user_id, modified_at
`

type AddCartItemParams struct {
	ProductEntryID int64 `json:"product_entry_id"`
	Quantity       int32 `json:"quantity"`
	UserID         int64 `json:"user_id"`
}

func (q *Queries) AddCartItem(ctx context.Context, arg AddCartItemParams) (CartItem, error) {
	row := q.db.QueryRowContext(ctx, addCartItem, arg.ProductEntryID, arg.Quantity, arg.UserID)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.ProductEntryID,
		&i.Quantity,
		&i.CreatedAt,
		&i.UserID,
		&i.ModifiedAt,
	)
	return i, err
}

const deleteAllCartItemByUserID = `-- name: DeleteAllCartItemByUserID :exec
DELETE FROM cart_item
WHERE user_id = $1
`

func (q *Queries) DeleteAllCartItemByUserID(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, deleteAllCartItemByUserID, userID)
	return err
}

const deleteCartItemByID = `-- name: DeleteCartItemByID :exec
DELETE FROM cart_item
WHERE id = $1
`

func (q *Queries) DeleteCartItemByID(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCartItemByID, id)
	return err
}

const getCartItemByEntryID = `-- name: GetCartItemByEntryID :one
SELECT id 
FROM cart_item
WHERE user_id = $1 AND product_entry_id = $2
`

type GetCartItemByEntryIDParams struct {
	UserID         int64 `json:"user_id"`
	ProductEntryID int64 `json:"product_entry_id"`
}

func (q *Queries) GetCartItemByEntryID(ctx context.Context, arg GetCartItemByEntryIDParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getCartItemByEntryID, arg.UserID, arg.ProductEntryID)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getCartItemByID = `-- name: GetCartItemByID :one
SELECT id, product_entry_id, quantity, created_at, user_id, modified_at 
FROM cart_item
WHERE id = $1
`

func (q *Queries) GetCartItemByID(ctx context.Context, id int64) (CartItem, error) {
	row := q.db.QueryRowContext(ctx, getCartItemByID, id)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.ProductEntryID,
		&i.Quantity,
		&i.CreatedAt,
		&i.UserID,
		&i.ModifiedAt,
	)
	return i, err
}

const getMerchantByCartID = `-- name: GetMerchantByCartID :one
SELECT p.merchant_id
FROM cart_item c
LEFT JOIN product_entry pde ON c.product_entry_id = pde.id
LEFT JOIN products p ON pde.product_id = p.id 
WHERE c.id = $1
`

func (q *Queries) GetMerchantByCartID(ctx context.Context, id int64) (sql.NullInt32, error) {
	row := q.db.QueryRowContext(ctx, getMerchantByCartID, id)
	var merchant_id sql.NullInt32
	err := row.Scan(&merchant_id)
	return merchant_id, err
}

const listCartItemsByUserID = `-- name: ListCartItemsByUserID :many
SELECT id, product_entry_id, quantity, created_at, user_id, modified_at
FROM cart_item
WHERE user_id = $1
`

func (q *Queries) ListCartItemsByUserID(ctx context.Context, userID int64) ([]CartItem, error) {
	rows, err := q.db.QueryContext(ctx, listCartItemsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CartItem{}
	for rows.Next() {
		var i CartItem
		if err := rows.Scan(
			&i.ID,
			&i.ProductEntryID,
			&i.Quantity,
			&i.CreatedAt,
			&i.UserID,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCartItem = `-- name: UpdateCartItem :one
UPDATE cart_item
SET
    quantity = quantity + $1,
    modified_at = $2
WHERE 
    id = $3
RETURNING id, product_entry_id, quantity, created_at, user_id, modified_at
`

type UpdateCartItemParams struct {
	Quantity   int32     `json:"quantity"`
	ModifiedAt time.Time `json:"modified_at"`
	ID         int64     `json:"id"`
}

func (q *Queries) UpdateCartItem(ctx context.Context, arg UpdateCartItemParams) (CartItem, error) {
	row := q.db.QueryRowContext(ctx, updateCartItem, arg.Quantity, arg.ModifiedAt, arg.ID)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.ProductEntryID,
		&i.Quantity,
		&i.CreatedAt,
		&i.UserID,
		&i.ModifiedAt,
	)
	return i, err
}
